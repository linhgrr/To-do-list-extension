// src/modules.ts
import * as vite from "vite";
import glob from "fast-glob";
import { resolve } from "node:path";
function defineWxtModule(module) {
  if (typeof module === "function") return { setup: module };
  return module;
}
function addEntrypoint(wxt, entrypoint) {
  wxt.hooks.hook("entrypoints:resolved", (wxt2, entrypoints) => {
    entrypoints.push(entrypoint);
  });
}
function addPublicAssets(wxt, dir) {
  wxt.hooks.hook("build:publicAssets", async (wxt2, files) => {
    const moreFiles = await glob("**/*", { cwd: dir });
    if (moreFiles.length === 0) {
      wxt2.logger.warn("No files to copy in", dir);
      return;
    }
    moreFiles.forEach((file) => {
      files.unshift({ absoluteSrc: resolve(dir, file), relativeDest: file });
    });
  });
}
function addViteConfig(wxt, viteConfig) {
  wxt.hooks.hook("ready", (wxt2) => {
    const userVite = wxt2.config.vite;
    wxt2.config.vite = async (env) => {
      const fromUser = await userVite(env);
      const fromModule = viteConfig(env) ?? {};
      return vite.mergeConfig(fromModule, fromUser);
    };
  });
}
function addWxtPlugin(wxt, plugin) {
  wxt.hooks.hook("ready", (wxt2) => {
    wxt2.config.plugins.push(plugin);
  });
}
function addImportPreset(wxt, preset) {
  wxt.hooks.hook("ready", (wxt2) => {
    if (!wxt2.config.imports) return;
    wxt2.config.imports.presets ??= [];
    if (wxt2.config.imports.presets.includes(preset)) return;
    wxt2.config.imports.presets.push(preset);
  });
}

export {
  defineWxtModule,
  addEntrypoint,
  addPublicAssets,
  addViteConfig,
  addWxtPlugin,
  addImportPreset
};
