"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/modules.ts
var modules_exports = {};
__export(modules_exports, {
  addEntrypoint: () => addEntrypoint,
  addImportPreset: () => addImportPreset,
  addPublicAssets: () => addPublicAssets,
  addViteConfig: () => addViteConfig,
  addWxtPlugin: () => addWxtPlugin,
  defineWxtModule: () => defineWxtModule
});
module.exports = __toCommonJS(modules_exports);
var vite = __toESM(require("vite"), 1);
var import_fast_glob = __toESM(require("fast-glob"), 1);
var import_node_path = require("path");
function defineWxtModule(module2) {
  if (typeof module2 === "function") return { setup: module2 };
  return module2;
}
function addEntrypoint(wxt, entrypoint) {
  wxt.hooks.hook("entrypoints:resolved", (wxt2, entrypoints) => {
    entrypoints.push(entrypoint);
  });
}
function addPublicAssets(wxt, dir) {
  wxt.hooks.hook("build:publicAssets", async (wxt2, files) => {
    const moreFiles = await (0, import_fast_glob.default)("**/*", { cwd: dir });
    if (moreFiles.length === 0) {
      wxt2.logger.warn("No files to copy in", dir);
      return;
    }
    moreFiles.forEach((file) => {
      files.unshift({ absoluteSrc: (0, import_node_path.resolve)(dir, file), relativeDest: file });
    });
  });
}
function addViteConfig(wxt, viteConfig) {
  wxt.hooks.hook("ready", (wxt2) => {
    const userVite = wxt2.config.vite;
    wxt2.config.vite = async (env) => {
      const fromUser = await userVite(env);
      const fromModule = viteConfig(env) ?? {};
      return vite.mergeConfig(fromModule, fromUser);
    };
  });
}
function addWxtPlugin(wxt, plugin) {
  wxt.hooks.hook("ready", (wxt2) => {
    wxt2.config.plugins.push(plugin);
  });
}
function addImportPreset(wxt, preset) {
  wxt.hooks.hook("ready", (wxt2) => {
    if (!wxt2.config.imports) return;
    wxt2.config.imports.presets ??= [];
    if (wxt2.config.imports.presets.includes(preset)) return;
    wxt2.config.imports.presets.push(preset);
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addEntrypoint,
  addImportPreset,
  addPublicAssets,
  addViteConfig,
  addWxtPlugin,
  defineWxtModule
});
